package com.codineers.springopenapi.core.model;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.util.Map;

/**
 * Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key
 * (either as a header or as a query parameter), OAuth2's common flows (implicit, password, application and access
 * code) as defined in RFC6749, and OpenID Connect Discovery.
 */
public class SecuritySchemeObject extends ExtensibleObject {
    /**
     * The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
     *
     * Applies to: Any
     */
    @NotBlank
    private final String type;

    /**
     * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
     *
     * Applies to: Any
     */
    private final String description;

    /**
     * The name of the header, query or cookie parameter to be used.
     *
     * Applies to: apiKey
     */
    @NotBlank
    private final String name;

    /**
     * The location of the API key. Valid values are "query", "header" or "cookie".
     *
     * Applies to: apiKey
     */
    @NotBlank
    private final String in;

    /**
     * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
     *
     * Applies to: http
     */
    @NotBlank
    private final String scheme;

    /**
     * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an
     * authorization server, so this information is primarily for documentation purposes.
     *
     * Applies to: http ("bearer")
     */
    private final String bearerFormat;

    /**
     * An object containing configuration information for the flow types supported.
     *
     * Applies to: oauth2
     */
    @NotNull
    private final OAuthFlowsObject flows;

    /**
     * OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
     *
     * Applies to: openIdConnect
     */
    @NotBlank
    private final String openIdConnectUrl;

    private SecuritySchemeObject(final String type, final String description, final String name, final String in,
                                 final String scheme, final String bearerFormat, final OAuthFlowsObject flows,
                                 final String openIdConnectUrl, final Map<String, ?> extensions) {
        super(extensions);
        this.type = type;
        this.description = description;
        this.name = name;
        this.in = in;
        this.scheme = scheme;
        this.bearerFormat = bearerFormat;
        this.flows = flows;
        this.openIdConnectUrl = openIdConnectUrl;
    }

    public String getType() {
        return type;
    }

    public String getDescription() {
        return description;
    }

    public String getName() {
        return name;
    }

    public String getIn() {
        return in;
    }

    public String getScheme() {
        return scheme;
    }

    public String getBearerFormat() {
        return bearerFormat;
    }

    public OAuthFlowsObject getFlows() {
        return flows;
    }

    public String getOpenIdConnectUrl() {
        return openIdConnectUrl;
    }

    public static final class Builder extends ExtensibleObject.Builder {
        private String type;
        private String description;
        private String name;
        private String in;
        private String scheme;
        private String bearerFormat;
        private OAuthFlowsObject flows;
        private String openIdConnectUrl;

        public static Builder builder() {
            return new Builder();
        }

        public Builder withType(final String type) {
            this.type = type;
            return this;
        }

        public Builder withDescription(final String description) {
            this.description = description;
            return this;
        }

        public Builder withName(final String name) {
            this.name = name;
            return this;
        }

        public Builder withIn(final String in) {
            this.in = in;
            return this;
        }

        public Builder withScheme(final String scheme) {
            this.scheme = scheme;
            return this;
        }

        public Builder withBearerFormat(final String bearerFormat) {
            this.bearerFormat = bearerFormat;
            return this;
        }

        public Builder withFlows(final OAuthFlowsObject flows) {
            this.flows = flows;
            return this;
        }

        public Builder withOpenIdConnectUrl(final String openIdConnectUrl) {
            this.openIdConnectUrl = openIdConnectUrl;
            return this;
        }

        public Builder withExtensions(final Map<String, ?> extensions) {
            this.extensions = extensions;
            return this;
        }

        public SecuritySchemeObject build() {
            return new SecuritySchemeObject(type, description, name, in, scheme, bearerFormat, flows, openIdConnectUrl, extensions);
        }
    }
}
